package com.udacity.pricing;

import com.udacity.pricing.service.PricingService;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import java.math.BigDecimal;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.equalTo;

@RunWith(SpringRunner.class)
@WebMvcTest
public class PricingServiceApplicationTests {

	@Autowired
	MockMvc mockMvc;

	@MockBean
	PricingService pricingService;

	/**
	 * Test a random ID:
	 * 	generate random ID
	 * 	create a get request and verify the status is ok
	 * 	assert that the response has the same price as the one generated by the PricingService
	 */
	@Test
	public void pricingMicroserviceTest() throws Exception {
		// generate a random ID between 1 and 19
		long leftLimit = 1L;
		long rightLimit = 19L;
		long id = leftLimit + (long) (Math.random() * (rightLimit - leftLimit));

		// send the mockMVC request and return the value
		MvcResult result =  mockMvc.perform(get("/services/price")
				.param("vehicleId", String.valueOf(id)))
				.andExpect(status().isOk())
				.andReturn();

		// convert the response to JSON
		MockHttpServletResponse content = result.getResponse();
		JSONObject json = new JSONObject(content.getContentAsString());

		// get the price from the response and set the scale to 2
		BigDecimal actual 	= new BigDecimal(json.getString("price")).setScale(2, );
		//get the price from the pricingService
		BigDecimal expected	= pricingService.getPrice(id).getPrice();

		assertThat(actual, equalTo(expected));
	}

	/**
	 * Run the random test multiple times
	 */
	@Test
	public void multiplePricingTest() throws Exception {
		for(int i = 0; i < 100; i++){
			pricingMicroserviceTest();
		}
	}

	/**
	 * Wrong test: run the test with a wrong ID
	 */
	@Test
	public void badTest() throws Exception{
		mockMvc.perform(get("/services/price")
				.param("vehicleId", "0"))
				.andExpect(status().isNotFound());

		mockMvc.perform(get("/services/price")
				.param("vehicleId", "20"))
				.andExpect(status().isNotFound());
	}
}
